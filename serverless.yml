service: GraphTV-Serverless

custom: ${file(serverless.${opt:stage}.yml)}

provider:
  name: aws
  runtime: python3.6
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
      Resource: { "Fn::Join" : ["", ["arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/GraphTV-Ratings-", "${opt:stage}" ] ] }
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", "${self:custom.search_s3_bucket}", '/search.json' ] ] }

package:
  include:
    - ratings.py
    - graphtv/**

functions:
  ShowRatings:
    handler: ratings.get_ratings
    memorySize: 128
    timeout: 10
    environment:
      RATINGS_TABLE: GraphTV-Ratings-${opt:stage}
  Search:
    handler: search.search
    memorySize: 128
    timeout: 10
    environment:
      SEARCH_S3_BUCKET: ${self:custom.search_s3_bucket}

resources:
  Resources:
    ExecuteShowRatings:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: [ ShowRatingsLambdaFunction, Arn ]
        Action: 'lambda:InvokeFunction'
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':${self:custom.api_gateway_id}/*/GET/show/*/ratings'
    ExecuteSearch:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: [ SearchLambdaFunction, Arn ]
        Action: 'lambda:InvokeFunction'
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':${self:custom.api_gateway_id}/*/GET/search/*'
